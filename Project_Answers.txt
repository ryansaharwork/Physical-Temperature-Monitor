			     EE 109  - Spring 2025
			      Temperature Monitor


Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these temperature monitoring systems.  Itemize the part costs (list each part
and its unit cost when bought in units of 1000) and then show the final cost
per unit below.  Note: You only need to price the components used in the
project (not all the components in your lab kit).  Also, you do not need to
account for the cost of the circuit board or wires. In a real environment we
would manufacture a PCB (Printed Circuit Board). As an optional task, you can
search online for PCB manufacturers and what the costs and options are in
creating a PCB.

After looking at jameco.com:
1,000 Arduino Uno R3 - $23,450 ($23.45 for 1, couldn't find bulk prices for this)
1,000 LCD Shield - $1,559 ($15.99 for 10)
2,000 240 Ohm Resistor - $0.022 (CLEARANCE: 0.011 for 1,000)
1,000 1.5k Ohm Resistor - $55.9 ($5.59 for 100)
1,000 4.7k Ohm Resistor - $0.035 (price for 1,000)
2,000 Push Buttons - $3.96 ($0.99 for 500)
1,000 Rotary Encoder + Knob (built together) - $81.8 ($4.09 for 50)
1,000 Servo Motor - $2,009 ($20.09 for 10)
1,000 RGB LED - $0.70 ($0.35 for 500)
1,000 Tri-State Buffer - $0.84 ($0.42 for 500)
1,000 Temperature Sensor - $149 ($1.49 for 10)

Total: $30,030.86
Average: $30.03 per unit



Review Question 2 (Health/Safety/Reliability)

Assume this system was to be used in a real industrial monitoring application.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

HW Testing:
- Test the dial and button, making sure they're responsive 
- Check that the wires and resistors are conducting current as expected
- Check that the LED is working properly (lighting up right)
- Check that the servo motor is working properly
- Check that the arduino and lcd are working correctly
- Check that the temp sensor is working correctly
SW Testing:
- Test threshold edge cases, like when low and high are equal or just testing what's expected
- Make sure that the software never enters an infinite loop anymore or crashes
- Make sure the software is getting rid of bad data (incomplete packets) and keeps using valid settings
   - You could write bad data to the EEPROM and check if the system detects the issues


 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

To make the design more reliable, i'd just add checks in the HW and SW to catch/handlge failures.
Like if the temp sensor isn't working correctly, the code should figure that out and show an error instead of 
continuing with the faulty data. You could also check if the EEPROM values are valid when you start the program.
If they're outside the range we have, the systme can ignore it and just use the default settings we have.

On the HW end, add pull-up resistors to make sure there isn't short circuiting or any issues regarding the electrical 
end of things. For SW, ignore faulty data like I mentioned so it can run properly. 

Another thing you could keep in mind is having the LED or temperature work properly even if the LCD or servo breaks, so 
the product stays useful to people who buy it. 

These are the only things I could really thing of to make this design more reliable and useful. 





